daemon off;
user  nginx;
worker_processes 4;
error_log  /dev/stderr error;
pid        /var/run/nginx.pid;
worker_rlimit_nofile 100000;

events {
    worker_connections  5000;
    multi_accept        off;
}

http {
    log_format  main_ext  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"$host" sn="$server_name" '
                        'rt=$request_time '
                        'ua="$upstream_addr" us="$upstream_status" '
                        'ut="$upstream_response_time" ul="$upstream_response_length" '
                        'cs=$upstream_cache_status' ;

    access_log  /dev/stdout main_ext;
    resolver    8.8.8.8;

    # don't write to disk
    proxy_request_buffering off;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    upstream shiny_servers {
        ip_hash;
        keepalive 100;
        # shard-upstream
    }
    
    
    server {
        listen [::]:8080;
        listen 8080 default_server;
        
        location / {
        proxy_pass http://shiny_servers;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        }

    }

    server {
        listen 8080;
        listen [::]:8080;
        server_name health.check;

        location /healthz {
            access_log off;
            return 200 "ok: healthz";
        }
    }
}